type token =
  | SEP
  | EOF
  | ENDLINE
  | ASSIGN
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURLY
  | RCURLY
  | COMMA
  | COLON
  | DECORATOR
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | CONCAT
  | BIND
  | DUP
  | EQ
  | NEQ
  | LT
  | LTE
  | GT
  | GTE
  | AND
  | OR
  | NOT
  | NOTE
  | TONE
  | RHYTHM
  | INT
  | BOOL
  | STRING
  | MAP
  | NONE
  | MAIN
  | FUNC
  | IN
  | IF
  | ELSE
  | FOR
  | WHILE
  | RETURN
  | LIT_BOOL of (bool)
  | LIT_INT of (int)
  | LIT_STR of (string)
  | LIT_KEY of (string)
  | LIT_STYLE of (string)
  | LIT_RHYTHM of (string)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 60 "parser.ml"
let yytransl_const = [|
  257 (* SEP *);
    0 (* EOF *);
  258 (* ENDLINE *);
  259 (* ASSIGN *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* LCURLY *);
  265 (* RCURLY *);
  266 (* COMMA *);
  267 (* COLON *);
  268 (* DECORATOR *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* CONCAT *);
  274 (* BIND *);
  275 (* DUP *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LTE *);
  280 (* GT *);
  281 (* GTE *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* NOTE *);
  286 (* TONE *);
  287 (* RHYTHM *);
  288 (* INT *);
  289 (* BOOL *);
  290 (* STRING *);
  291 (* MAP *);
  292 (* NONE *);
  293 (* MAIN *);
  294 (* FUNC *);
  295 (* IN *);
  296 (* IF *);
  297 (* ELSE *);
  298 (* FOR *);
  299 (* WHILE *);
  300 (* RETURN *);
    0|]

let yytransl_block = [|
  301 (* LIT_BOOL *);
  302 (* LIT_INT *);
  303 (* LIT_STR *);
  304 (* LIT_KEY *);
  305 (* LIT_STYLE *);
  306 (* LIT_RHYTHM *);
  307 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\004\000\006\000\
\006\000\009\000\009\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\007\000\007\000\010\000\008\000\
\008\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\013\000\013\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\018\000\
\018\000\019\000\019\000\014\000\014\000\014\000\014\000\014\000\
\014\000\020\000\016\000\017\000\017\000\021\000\021\000\021\000\
\015\000\022\000\022\000\022\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\011\000\010\000\008\000\008\000\000\000\
\001\000\002\000\004\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\006\000\000\000\002\000\003\000\000\000\
\002\000\002\000\003\000\003\000\003\000\005\000\005\000\003\000\
\000\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\003\000\003\000\003\000\004\000\000\000\
\001\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\004\000\003\000\001\000\001\000\000\000\001\000\003\000\
\003\000\000\000\003\000\005\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\077\000\000\000\001\000\000\000\000\000\003\000\
\000\000\000\000\015\000\016\000\017\000\013\000\012\000\014\000\
\000\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\020\000\000\000\000\000\022\000\021\000\000\000\000\000\007\000\
\000\000\000\000\000\000\024\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\000\000\
\025\000\000\000\000\000\036\000\000\000\000\000\064\000\000\000\
\011\000\021\000\023\000\000\000\069\000\068\000\065\000\071\000\
\000\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\000\000\028\000\000\000\000\000\073\000\000\000\000\000\000\000\
\032\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\043\000\044\000\005\000\000\000\066\000\
\072\000\075\000\000\000\000\000\000\000\000\000\055\000\000\000\
\004\000\000\000\030\000\031\000\000\000\076\000"

let yydgoto = "\002\000\
\003\000\004\000\008\000\009\000\050\000\038\000\043\000\051\000\
\039\000\052\000\073\000\074\000\098\000\075\000\076\000\077\000\
\078\000\133\000\134\000\079\000\089\000\092\000"

let yysindex = "\014\000\
\000\000\000\000\000\000\001\000\000\000\021\255\153\255\000\000\
\235\254\000\255\000\000\000\000\000\000\000\000\000\000\000\000\
\039\255\000\000\059\255\255\254\200\255\057\255\200\255\094\255\
\093\255\097\255\003\255\060\255\026\255\105\255\000\000\200\255\
\112\255\111\255\200\255\000\000\006\255\117\255\123\255\200\255\
\085\255\004\255\200\255\000\000\127\255\200\255\132\255\133\255\
\000\000\007\255\113\001\000\000\000\000\008\255\131\255\000\000\
\139\255\095\255\047\255\000\000\000\000\047\255\020\002\020\002\
\020\002\020\002\020\002\000\000\000\000\000\000\000\000\027\255\
\000\000\082\002\000\000\000\000\020\255\126\255\000\000\200\255\
\000\000\000\000\000\000\092\255\000\000\000\000\000\000\000\000\
\042\255\139\001\141\255\009\255\000\000\087\001\097\002\087\001\
\117\002\158\255\020\002\020\002\000\000\020\002\020\002\020\002\
\020\002\020\002\020\002\020\002\020\002\020\002\020\002\020\002\
\020\002\155\255\155\255\118\255\165\001\200\255\164\255\000\000\
\047\255\000\000\047\255\047\255\000\000\020\002\129\255\020\002\
\000\000\000\000\117\002\117\002\176\255\183\255\080\255\080\255\
\000\000\000\000\159\002\159\002\031\255\031\255\031\255\031\255\
\146\002\132\002\000\000\000\000\000\000\000\000\191\001\000\000\
\000\000\000\000\190\255\005\255\013\002\087\001\000\000\020\002\
\000\000\047\255\000\000\000\000\117\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\203\255\
\000\000\000\000\000\000\000\000\000\000\000\000\206\255\203\255\
\000\000\000\000\217\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\255\000\000\000\000\010\255\000\000\000\000\
\000\000\000\000\215\255\000\000\000\000\000\000\000\000\199\255\
\000\000\000\000\104\255\000\000\152\255\000\000\000\000\217\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\216\255\000\000\000\000\133\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\217\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\255\243\001\000\000\
\000\000\000\000\039\001\013\255\000\000\223\255\254\255\046\000\
\000\000\000\000\074\000\102\000\130\000\158\000\186\000\214\000\
\242\000\014\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\054\003\166\000\209\255\198\255\
\000\000\000\000\189\255\232\255\000\000\205\255\000\000\197\255\
\201\255\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 952
let yytable = "\087\000\
\005\000\090\000\087\000\088\000\025\000\080\000\091\000\086\000\
\025\000\025\000\086\000\025\000\025\000\025\000\001\000\123\000\
\021\000\058\000\124\000\074\000\059\000\117\000\058\000\116\000\
\010\000\059\000\127\000\049\000\129\000\099\000\100\000\025\000\
\125\000\074\000\118\000\035\000\114\000\115\000\093\000\094\000\
\095\000\096\000\097\000\102\000\103\000\104\000\105\000\022\000\
\120\000\026\000\058\000\121\000\059\000\033\000\147\000\148\000\
\044\000\057\000\081\000\151\000\023\000\087\000\024\000\087\000\
\087\000\153\000\028\000\154\000\155\000\086\000\156\000\086\000\
\086\000\070\000\131\000\132\000\070\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\163\000\164\000\068\000\069\000\070\000\104\000\105\000\
\071\000\085\000\030\000\031\000\032\000\141\000\087\000\158\000\
\035\000\034\000\166\000\035\000\035\000\035\000\086\000\035\000\
\036\000\035\000\068\000\040\000\035\000\035\000\035\000\035\000\
\041\000\045\000\068\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\046\000\048\000\053\000\165\000\
\055\000\056\000\082\000\083\000\084\000\119\000\035\000\035\000\
\116\000\035\000\035\000\035\000\035\000\035\000\035\000\123\000\
\065\000\035\000\035\000\065\000\065\000\065\000\130\000\065\000\
\059\000\065\000\065\000\149\000\065\000\065\000\065\000\065\000\
\152\000\157\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\159\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\065\000\065\000\
\160\000\065\000\065\000\065\000\065\000\065\000\065\000\037\000\
\162\000\065\000\065\000\037\000\037\000\047\000\037\000\008\000\
\037\000\069\000\009\000\037\000\037\000\037\000\037\000\033\000\
\034\000\069\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\057\000\011\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\000\000\037\000\037\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\000\000\000\000\
\037\000\037\000\000\000\000\000\000\000\000\000\038\000\000\000\
\000\000\038\000\038\000\038\000\000\000\038\000\000\000\038\000\
\000\000\000\000\038\000\038\000\006\000\000\000\000\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\038\000\007\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\039\000\038\000\
\038\000\039\000\039\000\039\000\000\000\039\000\000\000\039\000\
\000\000\000\000\039\000\039\000\000\000\000\000\000\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\045\000\000\000\000\000\045\000\045\000\045\000\
\000\000\045\000\000\000\045\000\039\000\039\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\045\000\045\000\039\000\
\039\000\000\000\000\000\045\000\045\000\045\000\046\000\000\000\
\000\000\046\000\046\000\046\000\000\000\046\000\000\000\046\000\
\045\000\045\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\046\000\046\000\045\000\045\000\000\000\000\000\046\000\
\046\000\046\000\047\000\000\000\000\000\047\000\047\000\047\000\
\000\000\047\000\000\000\047\000\046\000\046\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\047\000\047\000\046\000\
\046\000\000\000\000\000\047\000\047\000\047\000\048\000\000\000\
\000\000\048\000\048\000\048\000\000\000\048\000\000\000\048\000\
\047\000\047\000\000\000\047\000\047\000\047\000\047\000\047\000\
\047\000\048\000\048\000\047\000\047\000\000\000\000\000\048\000\
\048\000\048\000\049\000\000\000\000\000\049\000\049\000\049\000\
\000\000\049\000\000\000\049\000\048\000\048\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\049\000\049\000\048\000\
\048\000\000\000\000\000\049\000\049\000\049\000\050\000\000\000\
\000\000\050\000\050\000\050\000\000\000\050\000\000\000\050\000\
\049\000\049\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\050\000\050\000\049\000\049\000\000\000\000\000\050\000\
\050\000\050\000\052\000\000\000\000\000\052\000\052\000\052\000\
\000\000\052\000\000\000\052\000\050\000\050\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\050\000\
\050\000\000\000\000\000\052\000\052\000\052\000\053\000\000\000\
\000\000\053\000\053\000\053\000\000\000\053\000\000\000\053\000\
\052\000\052\000\000\000\052\000\052\000\052\000\052\000\052\000\
\052\000\000\000\000\000\052\000\052\000\000\000\000\000\054\000\
\053\000\053\000\054\000\054\000\054\000\000\000\054\000\000\000\
\054\000\000\000\000\000\000\000\053\000\053\000\000\000\053\000\
\053\000\053\000\053\000\053\000\053\000\000\000\000\000\053\000\
\053\000\000\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\054\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\054\000\054\000\058\000\000\000\059\000\000\000\060\000\000\000\
\000\000\000\000\000\000\102\000\103\000\104\000\105\000\000\000\
\000\000\000\000\106\000\107\000\126\000\109\000\110\000\111\000\
\112\000\113\000\063\000\000\000\058\000\000\000\059\000\000\000\
\060\000\061\000\000\000\000\000\000\000\000\000\064\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\062\000\000\000\
\071\000\072\000\000\000\000\000\063\000\000\000\058\000\000\000\
\059\000\000\000\060\000\122\000\000\000\000\000\000\000\000\000\
\064\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\062\000\000\000\071\000\072\000\000\000\000\000\063\000\000\000\
\058\000\000\000\059\000\000\000\060\000\150\000\000\000\000\000\
\000\000\000\000\064\000\000\000\065\000\066\000\067\000\068\000\
\069\000\070\000\062\000\000\000\071\000\072\000\000\000\000\000\
\063\000\000\000\058\000\000\000\059\000\000\000\060\000\161\000\
\000\000\000\000\000\000\000\000\064\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\062\000\000\000\071\000\072\000\
\000\000\000\000\063\000\000\000\024\000\000\000\024\000\000\000\
\024\000\024\000\000\000\000\000\000\000\000\000\064\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\024\000\000\000\
\071\000\072\000\000\000\000\000\024\000\000\000\029\000\000\000\
\029\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\
\024\000\000\000\024\000\024\000\024\000\024\000\024\000\024\000\
\029\000\000\000\024\000\024\000\000\000\000\000\029\000\000\000\
\058\000\000\000\059\000\000\000\060\000\000\000\000\000\058\000\
\000\000\059\000\029\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\062\000\000\000\029\000\029\000\000\000\000\000\
\063\000\062\000\000\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\064\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\020\000\000\000\071\000\072\000\
\068\000\069\000\070\000\000\000\000\000\071\000\072\000\000\000\
\000\000\000\000\027\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\101\000\000\000\000\000\037\000\000\000\000\000\
\042\000\000\000\000\000\000\000\000\000\037\000\102\000\103\000\
\104\000\105\000\000\000\054\000\000\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\102\000\103\000\104\000\
\105\000\000\000\000\000\000\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\000\000\000\000\000\000\000\000\
\000\000\102\000\103\000\104\000\105\000\000\000\000\000\128\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\102\000\103\000\104\000\105\000\000\000\000\000\000\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\102\000\103\000\
\104\000\105\000\000\000\000\000\000\000\106\000\107\000\108\000\
\109\000\110\000\111\000\102\000\103\000\104\000\105\000\000\000\
\000\000\000\000\000\000\000\000\108\000\109\000\110\000\111\000"

let yycheck = "\059\000\
\000\000\060\000\062\000\059\000\006\001\053\000\062\000\059\000\
\006\001\006\001\062\000\006\001\006\001\006\001\001\000\011\001\
\038\001\005\001\010\001\010\001\005\001\080\000\010\001\019\001\
\004\001\010\001\094\000\024\001\096\000\003\001\004\001\006\001\
\024\001\024\001\082\000\010\001\017\001\018\001\063\000\064\000\
\065\000\066\000\067\000\013\001\014\001\015\001\016\001\048\001\
\007\001\051\001\004\001\010\001\006\001\051\001\114\000\115\000\
\051\001\051\001\051\001\118\000\022\001\121\000\004\001\123\000\
\124\000\121\000\010\001\123\000\124\000\121\000\126\000\123\000\
\124\000\007\001\099\000\100\000\010\001\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\157\000\158\000\045\001\046\001\047\001\015\001\016\001\
\050\001\051\001\005\001\007\001\004\001\126\000\162\000\128\000\
\001\001\046\001\162\000\004\001\005\001\006\001\162\000\008\001\
\008\001\010\001\011\001\004\001\013\001\014\001\015\001\016\001\
\010\001\005\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\010\001\049\001\008\001\160\000\
\005\001\005\001\008\001\001\001\046\001\050\001\039\001\040\001\
\019\001\042\001\043\001\044\001\045\001\046\001\047\001\011\001\
\001\001\050\001\051\001\004\001\005\001\006\001\001\001\008\001\
\006\001\010\001\011\001\046\001\013\001\014\001\015\001\016\001\
\005\001\041\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\005\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\039\001\040\001\
\010\001\042\001\043\001\044\001\045\001\046\001\047\001\001\001\
\011\001\050\001\051\001\005\001\006\001\040\000\008\001\005\001\
\010\001\011\001\005\001\013\001\014\001\015\001\016\001\001\001\
\001\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\005\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\255\255\039\001\040\001\255\255\
\042\001\043\001\044\001\045\001\046\001\047\001\255\255\255\255\
\050\001\051\001\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\004\001\005\001\006\001\255\255\008\001\255\255\010\001\
\255\255\255\255\013\001\014\001\012\001\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\039\001\040\001\038\001\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\001\001\050\001\
\051\001\004\001\005\001\006\001\255\255\008\001\255\255\010\001\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\001\001\255\255\255\255\004\001\005\001\006\001\
\255\255\008\001\255\255\010\001\039\001\040\001\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\020\001\021\001\050\001\
\051\001\255\255\255\255\026\001\027\001\028\001\001\001\255\255\
\255\255\004\001\005\001\006\001\255\255\008\001\255\255\010\001\
\039\001\040\001\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\020\001\021\001\050\001\051\001\255\255\255\255\026\001\
\027\001\028\001\001\001\255\255\255\255\004\001\005\001\006\001\
\255\255\008\001\255\255\010\001\039\001\040\001\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\020\001\021\001\050\001\
\051\001\255\255\255\255\026\001\027\001\028\001\001\001\255\255\
\255\255\004\001\005\001\006\001\255\255\008\001\255\255\010\001\
\039\001\040\001\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\020\001\021\001\050\001\051\001\255\255\255\255\026\001\
\027\001\028\001\001\001\255\255\255\255\004\001\005\001\006\001\
\255\255\008\001\255\255\010\001\039\001\040\001\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\020\001\021\001\050\001\
\051\001\255\255\255\255\026\001\027\001\028\001\001\001\255\255\
\255\255\004\001\005\001\006\001\255\255\008\001\255\255\010\001\
\039\001\040\001\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\020\001\021\001\050\001\051\001\255\255\255\255\026\001\
\027\001\028\001\001\001\255\255\255\255\004\001\005\001\006\001\
\255\255\008\001\255\255\010\001\039\001\040\001\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\255\255\050\001\
\051\001\255\255\255\255\026\001\027\001\028\001\001\001\255\255\
\255\255\004\001\005\001\006\001\255\255\008\001\255\255\010\001\
\039\001\040\001\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\255\255\255\255\050\001\051\001\255\255\255\255\001\001\
\027\001\028\001\004\001\005\001\006\001\255\255\008\001\255\255\
\010\001\255\255\255\255\255\255\039\001\040\001\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\255\255\050\001\
\051\001\255\255\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\255\255\
\042\001\043\001\044\001\045\001\046\001\047\001\255\255\255\255\
\050\001\051\001\004\001\255\255\006\001\255\255\008\001\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\040\001\255\255\
\042\001\043\001\044\001\045\001\046\001\047\001\022\001\255\255\
\050\001\051\001\255\255\255\255\028\001\255\255\004\001\255\255\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\022\001\255\255\050\001\051\001\255\255\255\255\028\001\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\040\001\255\255\042\001\043\001\044\001\045\001\
\046\001\047\001\022\001\255\255\050\001\051\001\255\255\255\255\
\028\001\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\040\001\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\022\001\255\255\050\001\051\001\
\255\255\255\255\028\001\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\040\001\255\255\
\042\001\043\001\044\001\045\001\046\001\047\001\022\001\255\255\
\050\001\051\001\255\255\255\255\028\001\255\255\004\001\255\255\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\022\001\255\255\050\001\051\001\255\255\255\255\028\001\255\255\
\004\001\255\255\006\001\255\255\008\001\255\255\255\255\004\001\
\255\255\006\001\040\001\255\255\042\001\043\001\044\001\045\001\
\046\001\047\001\022\001\255\255\050\001\051\001\255\255\255\255\
\028\001\022\001\255\255\255\255\255\255\255\255\255\255\028\001\
\255\255\255\255\255\255\255\255\040\001\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\007\000\255\255\050\001\051\001\
\045\001\046\001\047\001\255\255\255\255\050\001\051\001\255\255\
\255\255\255\255\021\000\255\255\023\000\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\255\255\032\000\255\255\255\255\
\035\000\255\255\255\255\255\255\255\255\040\000\013\001\014\001\
\015\001\016\001\255\255\046\000\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\013\001\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\255\255\255\255\039\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\013\001\014\001\
\015\001\016\001\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\022\001\023\001\024\001\025\001"

let yynames_const = "\
  SEP\000\
  EOF\000\
  ENDLINE\000\
  ASSIGN\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LCURLY\000\
  RCURLY\000\
  COMMA\000\
  COLON\000\
  DECORATOR\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  CONCAT\000\
  BIND\000\
  DUP\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LTE\000\
  GT\000\
  GTE\000\
  AND\000\
  OR\000\
  NOT\000\
  NOTE\000\
  TONE\000\
  RHYTHM\000\
  INT\000\
  BOOL\000\
  STRING\000\
  MAP\000\
  NONE\000\
  MAIN\000\
  FUNC\000\
  IN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  RETURN\000\
  "

let yynames_block = "\
  LIT_BOOL\000\
  LIT_INT\000\
  LIT_STR\000\
  LIT_KEY\000\
  LIT_STYLE\000\
  LIT_RHYTHM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 52 "parser.mly"
            ( _1 )
# 530 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                  ( ([], []) )
# 536 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 56 "parser.mly"
                ( (_1, (_2 :: _1)) )
# 544 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : 'dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'type) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'params_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 60 "parser.mly"
    ( { fdec = _1;
        ftype = _3;
        fname = _4;
        params = List.rev _6;
        vars = List.rev _9;
        body = List.rev _10 } )
# 561 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'type) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'params_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 67 "parser.mly"
    ( { ftype = _2;
        fname = _3;
        params = List.rev _5;
        vars = List.rev _8;
        body = List.rev _9 } )
# 576 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 73 "parser.mly"
    ( { vars = List.rev _6;
        body = List.rev _7 } )
# 585 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 77 "parser.mly"
                                                                  ( Decorator(_3, _5, _7) )
# 594 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
                  ( [] )
# 600 "parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params_list) in
    Obj.repr(
# 81 "parser.mly"
                ( _1 )
# 607 "parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                             ( [(_1, _2)] )
# 615 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 85 "parser.mly"
                               ( (_3, _4) :: _1 )
# 624 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
            ( Bool )
# 630 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
            ( Int )
# 636 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
            ( String )
# 642 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
            ( Note )
# 648 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
            ( Tone )
# 654 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
            ( Rhythm )
# 660 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
            ( None )
# 666 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type) in
    Obj.repr(
# 95 "parser.mly"
                       ( Array(_1) )
# 673 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'type) in
    Obj.repr(
# 96 "parser.mly"
                              ( Map(_3, _5) )
# 681 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                  ( [] )
# 687 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 100 "parser.mly"
                     ( _2 :: _1 )
# 695 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 103 "parser.mly"
                ( (_1, _2) )
# 703 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                  ( [] )
# 709 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 107 "parser.mly"
                   ( _2 :: _1 )
# 717 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                                          ( Expr _1               )
# 724 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 111 "parser.mly"
                                          ( Return _2             )
# 731 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 112 "parser.mly"
                                          ( Block(List.rev _2)    )
# 738 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 113 "parser.mly"
                                          ( If(_2, _3, Block([])) )
# 746 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 114 "parser.mly"
                                          ( If(_2, _3, _5)        )
# 755 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 115 "parser.mly"
                                          ( For(_2, _4, _5)       )
# 764 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 116 "parser.mly"
                                          ( While(_2, _3)         )
# 772 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                  ( NoExpr )
# 778 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                ( _1 )
# 785 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literals) in
    Obj.repr(
# 124 "parser.mly"
             ( _1 )
# 792 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit_map) in
    Obj.repr(
# 125 "parser.mly"
            ( _1 )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 126 "parser.mly"
       ( Id(_1) )
# 806 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                     ( Binop(_1, Add, _3) )
# 814 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Binop(_1, Sub, _3) )
# 822 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Binop(_1, Mul, _3) )
# 830 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                     ( Binop(_1, Div, _3) )
# 838 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lit_array) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lit_array) in
    Obj.repr(
# 135 "parser.mly"
                               ( Binop(_1, Concat, _3) )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lit_array) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lit_array) in
    Obj.repr(
# 136 "parser.mly"
                             ( Binop(_1, Bind, _3) )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'val) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 137 "parser.mly"
                    ( Binop(_1, Dup, _3) )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                  ( Binop(_1, Eq,  _3) )
# 870 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                  ( Binop(_1, Neq, _3) )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                  ( Binop(_1, Lt,  _3) )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                  ( Binop(_1, Lte, _3) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                  ( Binop(_3, Lt,  _1) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                  ( Binop(_3, Lte, _1) )
# 910 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                  ( Uniop(Not, _2) )
# 917 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                  ( Binop(_1, And, _3) )
# 925 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                  ( Binop(_1, Or,  _3) )
# 933 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                   ( Assign(_1, _3) )
# 941 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 154 "parser.mly"
                              ( Call(_1, _3) )
# 949 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
                  ( [] )
# 955 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 158 "parser.mly"
               ( List.rev _1 )
# 962 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                            ( [_1] )
# 969 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                         ( _3 :: _1 )
# 977 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 165 "parser.mly"
                     ( LitBool(_1) )
# 984 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 166 "parser.mly"
                     ( LitInt(_1) )
# 991 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 167 "parser.mly"
                     ( LitStr(_1) )
# 998 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 168 "parser.mly"
                     ( LitRhythm(_1) )
# 1005 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit_note) in
    Obj.repr(
# 169 "parser.mly"
                     ( _1 )
# 1012 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit_array) in
    Obj.repr(
# 170 "parser.mly"
                     ( _1 )
# 1019 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 173 "parser.mly"
                                      ( LitNote(_2, _3) )
# 1027 "parser.ml"
               : 'lit_note))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'items_list) in
    Obj.repr(
# 176 "parser.mly"
                             ( LitArray(_2) )
# 1034 "parser.ml"
               : 'lit_array))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literals) in
    Obj.repr(
# 179 "parser.mly"
             ( _1 )
# 1041 "parser.ml"
               : 'val))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 180 "parser.mly"
       ( Id(_1) )
# 1048 "parser.ml"
               : 'val))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "parser.mly"
                    ( [] )
# 1054 "parser.ml"
               : 'items_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'val) in
    Obj.repr(
# 184 "parser.mly"
                    ( [_1] )
# 1061 "parser.ml"
               : 'items_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'items_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val) in
    Obj.repr(
# 185 "parser.mly"
                         ( _3 :: _1 )
# 1069 "parser.ml"
               : 'items_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'map_list) in
    Obj.repr(
# 188 "parser.mly"
                   ( LitMap(_2) )
# 1076 "parser.ml"
               : 'lit_map))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "parser.mly"
                                  ( [] )
# 1082 "parser.ml"
               : 'map_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'val) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val) in
    Obj.repr(
# 192 "parser.mly"
                                  ( [(_1, _3)] )
# 1090 "parser.ml"
               : 'map_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'map_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'val) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'val) in
    Obj.repr(
# 193 "parser.mly"
                                  ( (_3, _5) :: _1 )
# 1099 "parser.ml"
               : 'map_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
