func int[] quicksort(int arr[], int low, int high) {
  if(low < high) {
    int pi = partition(arr, low, high);
    arr = quickSort(arr, low, pi - 1);
    arr = quickSort(arr, pi + 1, high);
  }
  for(int i = 0; i < arr.length; i++) {
    print(arr[i]);
  }
  return arr;
}

func int partition(int[] arr, int high, int low) {
  int pivot = arr[high];
  int i = (low - 1);
  for(int j = low; j <= high - 1; j++) {
    if(arr[j] < pivot) {
      i = i + 1;
      int temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp; 
    }
  }
  int temp = arr[i + 1];
  arr[i + 1] = arr[high];
  arr[high] = temp;
  return(i + 1);
}

func int[] bubbleSort(int[] a, int n){
  int i;
  int j;
  int tmp;

  for (i = 0; i < n-1; i = i+1){
    for (j = 0; j < n-i-1; j = j+1){
      if (a[j] > a[j+1]){
        tmp = a[j];
        a[j] = a[j+1];
        a[j+1] = tmp;
        printa(a);
      }
    } 
  } 
  printa(a);
  return a;
}

func int[] selectionSort(int[] a, int n){
  int i;
  int j;
  int tmp;
  int min_idx;

  for (i = 0; i < n-1; i = i+1){
    min_idx = i;

    for (j = i+1; j < n; j = j+1){
      if (a[j] < a[min_idx]){
        min_idx = j;
      } 
    }  

    tmp = a[min_idx];
    a[min_idx] = a[i];
    a[i] = tmp;   
    printa(a);
  }   
  printa(a);
  return a;
}

/*

func note[] convertIntToNote(int[] a, int n){
  int i;
  note[] notes;
  note tmp;
  int val;
  notes = [<1, "wh">, <1, "wh">, <1, "wh">, <1, "wh">, <1, "wh">, <1, "wh">, <1, "wh">];

  printi(a[0]%5);

  val = a[0]%5;

  tmp = <2+1, "hf">;
  printn(tmp); 


  for(i = 0; i < n-1; i = i+1){
    tmp = <a[i]%5, "hf">;
    notes[i] = tmp;
  }

  return notes;
}*/

/*

func int main() {
  int[] a;
  note[] notes;

  a = [23, 11, 39, 44, 2, 16, 52];
  render(convertIntToNote(a, 7), "before.mid", 1, 120);

  bubbleSort(a, 7);

  return 0;
}*/




func int main() {
  int[] a;

  a = [23, 11, 39, 44, 2, 16, 52];
  bubbleSort(a, 7);

  a = [23, 11, 39, 44, 2, 16, 52];
  selectionSort(a, 7);

  a = [23, 11, 39, 44, 2, 16, 52];
  quickSort(a, 7);

  return 0;
}
