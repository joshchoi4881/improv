### Starting build.
# Target: improv.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:improv.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules improv.ml > improv.ml.depends # cached
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm.analysis -package llvm -o ast.cmo ast.ml # cached
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends
# Target: sast.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:sast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules sast.ml > sast.ml.depends # cached
# Target: sast.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm.analysis -package llvm -o sast.cmo sast.ml # cached
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package llvm.analysis -package llvm -o parser.cmi parser.mli # cached
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q scanner.mll # cached
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules scanner.ml > scanner.ml.depends # cached
# Target: semant.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:semant.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules semant.ml > semant.ml.depends # cached
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
File "codegen.ml", line 38, characters 21-158:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Note|Tone|Rhythm|Array _)
File "codegen.ml", line 133, characters 8-564:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Concat|Bind|Dup)
File "codegen.ml", line 121, characters 44-2027:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(SLitRhythm _|SLitNote (_, _)|SLitArray _)
# Target: scanner.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm.analysis -package llvm -o scanner.cmo scanner.ml
# Target: semant.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm.analysis -package llvm -o semant.cmo semant.ml
# Target: improv.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:improv.cmo, file:improv.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm.analysis -package llvm -o improv.cmo improv.ml
# Target: ast.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm.analysis -package llvm -o ast.cmx ast.ml
# Target: sast.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:sast.cmx, file:sast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm.analysis -package llvm -o sast.cmx sast.ml
# Target: parser.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm.analysis -package llvm -o parser.cmx parser.ml
# Target: codegen.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
+ ocamlfind ocamlopt -c -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
File "codegen.ml", line 38, characters 21-158:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Note|Tone|Rhythm|Array _)
File "codegen.ml", line 133, characters 8-564:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Concat|Bind|Dup)
File "codegen.ml", line 121, characters 44-2027:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(SLitRhythm _|SLitNote (_, _)|SLitArray _)
# Target: scanner.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm.analysis -package llvm -o scanner.cmx scanner.ml
# Target: semant.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm.analysis -package llvm -o semant.cmx semant.ml
# Target: improv.cmx, tags: { package(llvm), package(llvm.analysis), compile, extension:cmx, extension:ml, file:improv.cmx, file:improv.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package llvm.analysis -package llvm -o improv.cmx improv.ml
# Target: improv.native, tags: { package(llvm), package(llvm.analysis), dont_link_with, extension:native, file:improv.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg -package llvm.analysis -package llvm ast.cmx sast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx improv.cmx -o improv.native
# Compilation successful.
