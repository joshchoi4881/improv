type token =
  | SEP
  | EOF
  | ENDLINE
  | ASSIGN
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURLY
  | RCURLY
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | CONCAT
  | BIND
  | DUP
  | EQ
  | NEQ
  | LT
  | LTE
  | GT
  | GTE
  | AND
  | OR
  | NOT
  | NOTE
  | TONE
  | RHYTHM
  | INT
  | BOOL
  | STRING
  | NONE
  | FUNC
  | IN
  | IF
  | ELSE
  | FOR
  | WHILE
  | RETURN
  | LIT_BOOL of (bool)
  | LIT_INT of (int)
  | LIT_STRING of (string)
  | LIT_KEY of (string)
  | LIT_STYLE of (string)
  | LIT_RHYTHM of (string)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 57 "parser.ml"
let yytransl_const = [|
  257 (* SEP *);
    0 (* EOF *);
  258 (* ENDLINE *);
  259 (* ASSIGN *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* LCURLY *);
  265 (* RCURLY *);
  266 (* COMMA *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* MOD *);
  272 (* CONCAT *);
  273 (* BIND *);
  274 (* DUP *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LTE *);
  279 (* GT *);
  280 (* GTE *);
  281 (* AND *);
  282 (* OR *);
  283 (* NOT *);
  284 (* NOTE *);
  285 (* TONE *);
  286 (* RHYTHM *);
  287 (* INT *);
  288 (* BOOL *);
  289 (* STRING *);
  290 (* NONE *);
  291 (* FUNC *);
  292 (* IN *);
  293 (* IF *);
  294 (* ELSE *);
  295 (* FOR *);
  296 (* WHILE *);
  297 (* RETURN *);
    0|]

let yytransl_block = [|
  298 (* LIT_BOOL *);
  299 (* LIT_INT *);
  300 (* LIT_STRING *);
  301 (* LIT_KEY *);
  302 (* LIT_STYLE *);
  303 (* LIT_RHYTHM *);
  304 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\007\000\007\000\003\000\008\000\008\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\012\000\012\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\015\000\015\000\016\000\016\000\
\013\000\013\000\013\000\013\000\013\000\013\000\017\000\014\000\
\018\000\018\000\018\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\010\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\000\000\002\000\003\000\001\000\002\000\002\000\003\000\
\003\000\003\000\005\000\005\000\003\000\000\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\000\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\005\000\003\000\
\000\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\068\000\000\000\001\000\013\000\014\000\015\000\
\011\000\010\000\012\000\016\000\000\000\003\000\004\000\000\000\
\000\000\000\000\000\000\000\000\017\000\020\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\018\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\058\000\059\000\060\000\000\000\019\000\000\000\
\021\000\000\000\032\000\000\000\061\000\000\000\000\000\000\000\
\000\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\022\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\000\000\025\000\000\000\
\000\000\000\000\000\000\029\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\037\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\063\000\027\000\028\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\014\000\015\000\016\000\025\000\032\000\048\000\
\026\000\049\000\050\000\063\000\051\000\052\000\096\000\097\000\
\053\000\055\000"

let yysindex = "\013\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\100\255\000\000\000\000\002\255\
\003\255\010\255\026\255\045\255\000\000\000\000\100\255\005\255\
\059\255\073\255\000\000\081\255\100\255\000\000\006\255\221\001\
\000\000\088\002\080\002\058\255\088\002\088\002\088\002\088\002\
\088\002\000\000\000\000\000\000\000\000\030\255\000\000\008\002\
\000\000\150\002\000\000\042\255\000\000\185\002\077\255\032\002\
\098\255\000\000\154\001\166\002\154\001\185\002\126\255\088\002\
\088\002\000\000\000\000\000\000\088\002\088\002\088\002\088\002\
\088\002\088\002\088\002\088\002\088\002\088\002\088\002\088\002\
\088\002\088\002\131\255\131\255\000\000\088\002\000\000\105\255\
\112\002\107\255\088\002\000\000\000\000\185\002\185\002\167\255\
\163\255\162\255\162\255\000\000\000\000\000\000\145\255\009\002\
\009\002\007\255\007\255\007\255\007\255\201\002\112\001\000\000\
\000\000\185\002\155\255\098\255\080\002\154\001\000\000\088\002\
\000\000\000\000\000\000\185\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\176\255\000\000\
\000\000\184\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\078\255\000\000\000\000\000\000\000\000\000\000\000\000\
\195\255\000\000\000\000\000\000\000\000\055\255\000\000\000\000\
\000\000\000\000\000\000\099\255\000\000\083\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\199\255\000\000\000\000\
\196\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\002\000\000\000\000\000\000\111\001\018\255\000\000\
\197\255\143\255\187\255\000\000\000\000\000\000\231\255\036\000\
\080\000\124\000\168\000\212\000\000\001\044\001\067\001\000\000\
\000\000\164\255\000\000\197\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\255"

let yygindex = "\000\000\
\000\000\000\000\171\000\000\000\003\000\000\000\000\000\169\000\
\000\000\210\255\222\255\000\000\000\000\032\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 993
let yytable = "\054\000\
\005\000\067\000\058\000\059\000\060\000\061\000\062\000\018\000\
\018\000\067\000\018\000\018\000\090\000\001\000\092\000\017\000\
\021\000\069\000\070\000\071\000\072\000\073\000\055\000\056\000\
\074\000\024\000\022\000\055\000\056\000\094\000\095\000\031\000\
\064\000\065\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\023\000\019\000\020\000\114\000\027\000\033\000\106\000\033\000\
\118\000\083\000\084\000\033\000\033\000\033\000\033\000\028\000\
\033\000\033\000\033\000\033\000\033\000\033\000\122\000\123\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\029\000\085\000\065\000\124\000\086\000\065\000\
\030\000\066\000\033\000\033\000\066\000\033\000\033\000\033\000\
\033\000\033\000\033\000\062\000\057\000\033\000\033\000\062\000\
\062\000\062\000\062\000\088\000\062\000\062\000\062\000\062\000\
\062\000\062\000\112\000\113\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\093\000\006\000\
\007\000\008\000\009\000\010\000\011\000\012\000\062\000\062\000\
\034\000\062\000\062\000\062\000\062\000\062\000\062\000\034\000\
\117\000\062\000\062\000\034\000\034\000\034\000\034\000\115\000\
\034\000\034\000\034\000\069\000\070\000\071\000\072\000\073\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\067\000\119\000\120\000\067\000\071\000\072\000\
\073\000\121\000\034\000\034\000\006\000\034\000\034\000\034\000\
\034\000\034\000\034\000\035\000\007\000\034\000\034\000\035\000\
\035\000\035\000\035\000\030\000\035\000\035\000\035\000\031\000\
\053\000\054\000\047\000\056\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\050\000\
\000\000\035\000\035\000\050\000\050\000\050\000\050\000\000\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\050\000\000\000\050\000\050\000\050\000\
\050\000\050\000\050\000\000\000\000\000\050\000\050\000\000\000\
\000\000\000\000\000\000\000\000\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\039\000\000\000\000\000\000\000\
\039\000\039\000\039\000\039\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\039\000\
\000\000\000\000\000\000\000\000\039\000\039\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\039\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\040\000\000\000\039\000\039\000\040\000\040\000\040\000\040\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\040\000\000\000\000\000\000\000\000\000\
\040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\040\000\000\000\040\000\040\000\
\040\000\040\000\040\000\040\000\041\000\000\000\040\000\040\000\
\041\000\041\000\041\000\041\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\000\000\000\000\000\000\000\000\041\000\041\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\041\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
\042\000\000\000\041\000\041\000\042\000\042\000\042\000\042\000\
\000\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\000\000\000\000\000\000\000\000\
\042\000\042\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\042\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\043\000\000\000\042\000\042\000\
\043\000\043\000\043\000\043\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\
\000\000\000\000\000\000\000\000\043\000\043\000\043\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\043\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\044\000\000\000\043\000\043\000\044\000\044\000\044\000\044\000\
\000\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\044\000\000\000\000\000\000\000\000\000\
\044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\044\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\046\000\000\000\044\000\044\000\
\046\000\046\000\046\000\046\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\046\000\046\000\046\000\047\000\
\047\000\047\000\047\000\000\000\047\000\000\000\000\000\046\000\
\046\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\000\000\000\000\046\000\046\000\047\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\051\000\
\000\000\047\000\047\000\051\000\051\000\051\000\051\000\000\000\
\051\000\000\000\069\000\070\000\071\000\072\000\073\000\000\000\
\000\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\051\000\000\000\051\000\051\000\051\000\
\051\000\051\000\051\000\000\000\000\000\051\000\051\000\034\000\
\000\000\035\000\000\000\000\000\069\000\070\000\071\000\072\000\
\073\000\000\000\000\000\074\000\075\000\076\000\089\000\078\000\
\079\000\080\000\081\000\082\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
\039\000\040\000\041\000\042\000\043\000\044\000\000\000\000\000\
\045\000\046\000\058\000\000\000\058\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\000\000\000\000\034\000\000\000\035\000\000\000\000\000\000\000\
\000\000\058\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\036\000\000\000\058\000\058\000\000\000\000\000\037\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\000\000\
\000\000\038\000\000\000\039\000\040\000\041\000\042\000\043\000\
\044\000\000\000\000\000\045\000\046\000\034\000\000\000\035\000\
\066\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\000\000\000\000\074\000\000\000\036\000\077\000\078\000\079\000\
\080\000\000\000\037\000\000\000\000\000\034\000\000\000\035\000\
\087\000\000\000\000\000\000\000\038\000\000\000\039\000\040\000\
\041\000\042\000\043\000\044\000\036\000\000\000\045\000\046\000\
\000\000\000\000\037\000\000\000\000\000\026\000\000\000\026\000\
\026\000\000\000\000\000\000\000\038\000\000\000\039\000\040\000\
\041\000\042\000\043\000\044\000\026\000\000\000\045\000\046\000\
\000\000\000\000\026\000\000\000\000\000\034\000\000\000\035\000\
\000\000\000\000\000\000\000\000\026\000\034\000\026\000\026\000\
\026\000\026\000\026\000\026\000\036\000\000\000\026\000\026\000\
\000\000\000\000\037\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\038\000\034\000\039\000\040\000\
\041\000\042\000\043\000\044\000\000\000\000\000\045\000\046\000\
\000\000\042\000\043\000\044\000\036\000\000\000\045\000\046\000\
\000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\000\000\042\000\116\000\044\000\000\000\000\000\045\000\046\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\000\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\000\000\091\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\069\000\070\000\071\000\072\000\073\000\
\000\000\000\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000"

let yycheck = "\034\000\
\000\000\048\000\037\000\038\000\039\000\040\000\041\000\006\001\
\006\001\056\000\006\001\006\001\059\000\001\000\061\000\013\000\
\007\001\011\001\012\001\013\001\014\001\015\001\005\001\005\001\
\018\001\023\000\001\001\010\001\010\001\064\000\065\000\029\000\
\003\001\004\001\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\004\001\048\001\048\001\086\000\048\001\048\001\089\000\001\001\
\091\000\016\001\017\001\005\001\006\001\007\001\008\001\005\001\
\010\001\011\001\012\001\013\001\014\001\015\001\117\000\118\000\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\010\001\007\001\007\001\120\000\010\001\010\001\
\008\001\007\001\036\001\037\001\010\001\039\001\040\001\041\001\
\042\001\043\001\044\001\001\001\043\001\047\001\048\001\005\001\
\006\001\007\001\008\001\010\001\010\001\011\001\012\001\013\001\
\014\001\015\001\083\000\084\000\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\001\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\036\001\037\001\
\006\001\039\001\040\001\041\001\042\001\043\001\044\001\001\001\
\038\001\047\001\048\001\005\001\006\001\007\001\008\001\047\001\
\010\001\011\001\012\001\011\001\012\001\013\001\014\001\015\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\007\001\005\001\010\001\010\001\013\001\014\001\
\015\001\023\001\036\001\037\001\005\001\039\001\040\001\041\001\
\042\001\043\001\044\001\001\001\005\001\047\001\048\001\005\001\
\006\001\007\001\008\001\001\001\010\001\011\001\012\001\001\001\
\005\001\005\001\032\000\035\000\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\001\001\
\255\255\047\001\048\001\005\001\006\001\007\001\008\001\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\047\001\048\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\001\001\255\255\255\255\255\255\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\255\255\039\001\040\001\041\001\042\001\043\001\044\001\
\001\001\255\255\047\001\048\001\005\001\006\001\007\001\008\001\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\001\001\255\255\047\001\048\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\255\255\039\001\040\001\041\001\042\001\043\001\044\001\
\001\001\255\255\047\001\048\001\005\001\006\001\007\001\008\001\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\001\001\255\255\047\001\048\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\255\255\039\001\040\001\041\001\042\001\043\001\044\001\
\001\001\255\255\047\001\048\001\005\001\006\001\007\001\008\001\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\001\001\255\255\047\001\048\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\025\001\026\001\027\001\005\001\
\006\001\007\001\008\001\255\255\010\001\255\255\255\255\036\001\
\037\001\255\255\039\001\040\001\041\001\042\001\043\001\044\001\
\255\255\255\255\047\001\048\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\001\001\
\255\255\047\001\048\001\005\001\006\001\007\001\008\001\255\255\
\010\001\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\047\001\048\001\006\001\
\255\255\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\037\001\255\255\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\047\001\048\001\006\001\255\255\008\001\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\021\001\255\255\047\001\048\001\255\255\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\255\255\255\255\047\001\048\001\006\001\255\255\008\001\
\009\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\255\255\021\001\021\001\022\001\023\001\
\024\001\255\255\027\001\255\255\255\255\006\001\255\255\008\001\
\009\001\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\021\001\255\255\047\001\048\001\
\255\255\255\255\027\001\255\255\255\255\006\001\255\255\008\001\
\009\001\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\021\001\255\255\047\001\048\001\
\255\255\255\255\027\001\255\255\255\255\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\037\001\006\001\039\001\040\001\
\041\001\042\001\043\001\044\001\021\001\255\255\047\001\048\001\
\255\255\255\255\027\001\255\255\021\001\255\255\255\255\255\255\
\255\255\255\255\027\001\255\255\037\001\006\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\047\001\048\001\
\255\255\042\001\043\001\044\001\021\001\255\255\047\001\048\001\
\255\255\255\255\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\042\001\043\001\044\001\255\255\255\255\047\001\048\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\036\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001"

let yynames_const = "\
  SEP\000\
  EOF\000\
  ENDLINE\000\
  ASSIGN\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LCURLY\000\
  RCURLY\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  CONCAT\000\
  BIND\000\
  DUP\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LTE\000\
  GT\000\
  GTE\000\
  AND\000\
  OR\000\
  NOT\000\
  NOTE\000\
  TONE\000\
  RHYTHM\000\
  INT\000\
  BOOL\000\
  STRING\000\
  NONE\000\
  FUNC\000\
  IN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  RETURN\000\
  "

let yynames_block = "\
  LIT_BOOL\000\
  LIT_INT\000\
  LIT_STRING\000\
  LIT_KEY\000\
  LIT_STYLE\000\
  LIT_RHYTHM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 51 "parser.mly"
            ( _1 )
# 516 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
                  ( ([], []) )
# 522 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 55 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 530 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 56 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 538 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'params_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 60 "parser.mly"
    ( { ftype = _2;
        fname = _3;
        params = List.rev _5;
        vars = List.rev _8;
        body = List.rev _9 } )
# 553 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
                  ( [] )
# 559 "parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params_list) in
    Obj.repr(
# 68 "parser.mly"
                ( _1 )
# 566 "parser.ml"
               : 'params_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                            ( [(_1, _2)] )
# 574 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                              ( (_3, _4) :: _1 )
# 583 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
            ( Bool )
# 589 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
            ( Int )
# 595 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
            ( String )
# 601 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
            ( Note )
# 607 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
            ( Tone )
# 613 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
            ( Rhythm )
# 619 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
            ( None )
# 625 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 82 "parser.mly"
                      ( Array(_1) )
# 632 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                  ( [] )
# 638 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 86 "parser.mly"
                     ( _2 :: _1 )
# 646 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 89 "parser.mly"
               ( (_1, _2) )
# 654 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
         ( [_1] )
# 661 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                   ( _2 :: _1 )
# 669 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                          ( Expr _1               )
# 676 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 97 "parser.mly"
                                          ( Return _2             )
# 683 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 98 "parser.mly"
                                          ( Block(List.rev _2)    )
# 690 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 99 "parser.mly"
                                          ( If(_2, _3, Block([])) )
# 698 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 100 "parser.mly"
                                          ( If(_2, _3, _5)        )
# 707 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 101 "parser.mly"
                                          ( For(_2, _4, _5)       )
# 716 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 102 "parser.mly"
                                          ( While(_2, _3)         )
# 724 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                  ( NoExpr )
# 730 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                ( _1 )
# 737 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literals) in
    Obj.repr(
# 110 "parser.mly"
             ( _1 )
# 744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parser.mly"
       ( Id(_1) )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Add, _3) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Sub, _3) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Mul, _3) )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Div, _3) )
# 783 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Mod, _3) )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                  ( Binop(_1, Eq,  _3) )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                  ( Binop(_1, Neq, _3) )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                  ( Binop(_1, Lt,  _3) )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                  ( Binop(_1, Lte, _3) )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                  ( Binop(_3, Lt,  _1) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                  ( Binop(_3, Lte, _1) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                  ( Uniop(Not, _2) )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                  ( Binop(_1, And, _3) )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                  ( Binop(_1, Or,  _3) )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lit_array) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lit_array) in
    Obj.repr(
# 132 "parser.mly"
                               ( Binop(_1, Concat, _3) )
# 870 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lit_array) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lit_array) in
    Obj.repr(
# 133 "parser.mly"
                             ( Binop(_1, Bind, _3) )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                  ( Binop(_1, Dup, _3) )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                   ( Assign(_1, _3) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 140 "parser.mly"
                              ( Call(_1, _3) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
                  ( [] )
# 908 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 144 "parser.mly"
               ( List.rev _1 )
# 915 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                            ( [_1] )
# 922 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                         ( _3 :: _1 )
# 930 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 151 "parser.mly"
                     ( LitBool(_1) )
# 937 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 152 "parser.mly"
                     ( LitInt(_1) )
# 944 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 153 "parser.mly"
                     ( LitString(_1) )
# 951 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 154 "parser.mly"
                     ( LitRhythm(_1) )
# 958 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit_note) in
    Obj.repr(
# 155 "parser.mly"
                     ( _1 )
# 965 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit_array) in
    Obj.repr(
# 156 "parser.mly"
                     ( _1 )
# 972 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 159 "parser.mly"
                                    ( LitNote(_2, _4) )
# 980 "parser.ml"
               : 'lit_note))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'items_list) in
    Obj.repr(
# 162 "parser.mly"
                             ( LitArray(_2) )
# 987 "parser.ml"
               : 'lit_array))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "parser.mly"
                     ( [] )
# 993 "parser.ml"
               : 'items_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                     ( [_1] )
# 1000 "parser.ml"
               : 'items_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'items_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                          ( _3 :: _1 )
# 1008 "parser.ml"
               : 'items_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
