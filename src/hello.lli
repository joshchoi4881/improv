; ModuleID = 'Improv'
source_filename = "Improv"

@glo = global i32 0
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@str = private unnamed_addr constant [2 x i8] c"0\00"

declare i32 @printf(i8*, ...)

declare i32 @printbig(i32)

declare i32 @printn({ i32, i8* })

declare i32 @render({ i32, { i32, i8* }* }, i8*, i32, i32)

define i32 @main() {
entry:
  %a = alloca i32
  %n = alloca { i32, i8* }
  store i32 3, i32* %a
  %printbig = call i32 @printbig(i32 3)
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str, i32 0, i32 0) }, { i32, i8* }* %n
  %n1 = load { i32, i8* }, { i32, i8* }* %n
  %printn = call i32 @printn({ i32, i8* } %n1)
  ret i32 0
}
